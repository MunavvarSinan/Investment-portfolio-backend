{"version":3,"sources":["../../src/controller/userController.js"],"names":["userSchema","Joi","object","keys","email","string","required","username","alphanum","min","max","optional","mobileNumber","number","password","transporter","nodemailer","createTransport","service","auth","user","pass","userRegister","req","res","result","validate","body","error","status","json","success","msg","details","message","User","findOne","then","bcrypt","genSalt","err","salt","hash","err2","query","create","err3","createdUser","console","log","userID","_id","userLogin","compare","_err2","isMatch","process","env","SECRET","Error","token","jwt","sign","toJSON","expiresIn","userId","ActiveSession","undefined","userLogout","tokenId","deleteMany","getAllUsers","_req","find","users","map","item","x","__v","editUser","investedAmount","currentAmount","length","newvalues","$set","updateOne","getTransactionHistory","id","params","findById","TransactionHistory","data","succss","resetPassword","send","resetToken","save","mailOptions","from","to","subject","text","CLIENT_URL","sendMail","response","succes","newPassword","reset","changePassword","addOrWithdrawRequest","amount","addOrWithdraw"],"mappings":"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","file":"userController.js","sourcesContent":["import User from '../models/user.js';\r\nimport Joi from 'joi';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt-nodejs';\r\nimport ActiveSession from '../models/activeSession.js';\r\nimport nodemailer from 'nodemailer';\r\nimport TransactionHistory from '../models/transactionHistory.js';\r\n\r\nconst userSchema = Joi.object().keys({\r\n  email: Joi.string().email().required(),\r\n  username: Joi.string().alphanum().min(4).max(15).optional(),\r\n  mobileNumber: Joi.number().optional(),\r\n  password: Joi.string().required(),\r\n});\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: 'smartfunds54@gmail.com',\r\n    pass: 'smartfunds5433',\r\n  },\r\n});\r\n\r\nexport default {\r\n  userRegister: (req, res) => {\r\n    // Joy Validation\r\n    const result = userSchema.validate(req.body);\r\n    if (result.error) {\r\n      res.status(422).json({\r\n        success: false,\r\n        msg: `Validation err: ${result.error.details[0].message}`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const { username, email, password, mobileNumber } = req.body;\r\n\r\n    User.findOne({ email }).then((user) => {\r\n      if (user) {\r\n        res.json({ success: false, msg: 'Email already exists' });\r\n      } else {\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n          bcrypt.hash(password, salt, null, (err2, hash) => {\r\n            if (err2) throw err2;\r\n            const query = {\r\n              username,\r\n              mobileNumber,\r\n              email,\r\n              password: hash,\r\n            };\r\n            User.create(query, (err3, createdUser) => {\r\n              if (err3) console.log(err3);\r\n              res.json({\r\n                success: true,\r\n                userID: createdUser._id,\r\n                msg: 'The user was succesfully registered',\r\n              });\r\n            });\r\n          });\r\n        });\r\n      }\r\n    });\r\n  },\r\n  userLogin: (req, res) => {\r\n    // Joy Validation\r\n    const result = userSchema.validate(req.body);\r\n    if (result.error) {\r\n      res.status(422).json({\r\n        success: false,\r\n        msg: `Validation err: ${result.error.details[0].message}`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const { email } = req.body;\r\n    const { password } = req.body;\r\n\r\n    User.findOne({ email }, null, null, (err, user) => {\r\n      if (err) throw err;\r\n\r\n      if (!user) {\r\n        return res.json({ success: false, msg: 'Wrong credentials' });\r\n      }\r\n\r\n      if (!user.password) {\r\n        return res.json({ success: false, msg: 'No password' });\r\n      }\r\n\r\n      bcrypt.compare(password, user.password, (_err2, isMatch) => {\r\n        if (isMatch) {\r\n          if (!process.env.SECRET) {\r\n            throw new Error('SECRET not provided');\r\n          }\r\n          const token = jwt.sign(user.toJSON(), process.env.SECRET, {\r\n            expiresIn: 86400, // 1 week\r\n          });\r\n\r\n          const query = { userId: user._id, token };\r\n          ActiveSession.create(query, () => {\r\n            // Delete the password (hash)\r\n            user.password = undefined;\r\n            return res.json({\r\n              success: true,\r\n              token,\r\n              user,\r\n            });\r\n          });\r\n        } else {\r\n          return res.json({ success: false, msg: 'Wrong credentials' });\r\n        }\r\n      });\r\n    });\r\n  },\r\n  userLogout: (req, res) => {\r\n    const { tokenId, token } = req.body;\r\n    ActiveSession.deleteMany({ token }, (err) => {\r\n      if (err) {\r\n        res.json({ success: false });\r\n      }\r\n      res.json({ success: true });\r\n    });\r\n  },\r\n\r\n  getAllUsers: (_req, res) => {\r\n    User.find({}, (err, users) => {\r\n      if (err) {\r\n        res.json({ success: false });\r\n      }\r\n      users = users.map((item) => {\r\n        const x = item;\r\n        x.password = undefined;\r\n        x.__v = undefined;\r\n        return x;\r\n      });\r\n      res.json({ success: true, users });\r\n    });\r\n  },\r\n  editUser: (req, res) => {\r\n    const { userID, username, email, investedAmount, currentAmount } = req.body;\r\n\r\n    User.find({ _id: userID }).then((user) => {\r\n      if (user.length === 1) {\r\n        const query = { _id: user[0]._id };\r\n        const newvalues = {\r\n          $set: { username, email, investedAmount, currentAmount },\r\n        };\r\n        User.updateOne(query, newvalues, null, (err) => {\r\n          if (err) {\r\n            // eslint-disable-next-line max-len\r\n            res.json({\r\n              success: false,\r\n              msg: 'There was an error. Please contract the administator',\r\n            });\r\n          }\r\n          res.json({ success: true });\r\n        });\r\n      } else {\r\n        res.json({ success: false });\r\n      }\r\n    });\r\n  },\r\n  getTransactionHistory: (req, res) => {\r\n    const { id } = req.params;\r\n    // const { email } = req.body\r\n    User.findById(id, (err, result) => {\r\n      const { email } = result;\r\n      TransactionHistory.find({ email }, (err, data) => {\r\n        if (err) {\r\n          res.json({ success: false });\r\n          console.log(err);\r\n        }\r\n        // console.log(data);\r\n        res.json({ succss: true, data });\r\n      });\r\n      console.log(result);\r\n    });\r\n  },\r\n  resetPassword: (req, res) => {\r\n    if (req.body.email == '') {\r\n      res.status(400).send('Email required');\r\n      return res.json({success: false , msg: 'Email address is wrong'})\r\n    }\r\n    console.error(req.body.email);\r\n\r\n    User.findOne({ email: req.body.email }).then((user) => {\r\n      if (!user) {\r\n        console.error('Email not found!');\r\n        // res.status(403).send('Email not found!');\r\n        return res.json({ success: false, msg: 'No user found with this Email' });\r\n      } else {\r\n        const token = jwt.sign({ _id: user.id }, process.env.SECRET, {\r\n          expiresIn: '20m',\r\n        });\r\n\r\n        user.resetToken = token;\r\n        user.save().then((result) => {\r\n          const mailOptions = {\r\n            from: 'smartfunds54@gmail.com',\r\n            to: `${user.email}`,\r\n            subject: 'Link To Reset Password',\r\n            text:\r\n              'You are receiving this because you (or someone else) have requested to reset the password of your account. \\n\\n' +\r\n              'Please click on the following link, or paste this into your browser to complete the process within one hour of receiving it: \\n\\n' +\r\n              `${process.env.CLIENT_URL}/users/reset/${token}\\n` +\r\n              'if you did not requested this, please ignore this email and your password will remain unchanged',\r\n          };\r\n          console.log('Sending Email');\r\n\r\n          transporter.sendMail(mailOptions, (err, response) => {\r\n            if (err) {\r\n              console.error('There was an error: ', err);\r\n              return  res.json({success: false, msg: 'Error sending mail'})\r\n            } else {\r\n              console.log('here is the res: ', response);\r\n              res\r\n                .status(200)\r\n                .json({ succes: true, msg: 'recovery email sent' });\r\n            }\r\n          });\r\n        });\r\n      }\r\n    });\r\n  },\r\n  newPassword: (req, res) => {\r\n    User.findOne({ resetToken: req.body.resetToken }, (err, data) => {\r\n      if (!data) console.log('Error');\r\n      else {\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n          if (err) console.log(err);\r\n          bcrypt.hash(req.body.password, salt, null, (err2, hash) => {\r\n            if (err2) throw err2;\r\n            data.password = hash;\r\n            data.resetToken = null;\r\n          });\r\n        });\r\n        data.save().then(() => {\r\n          console.log('Password upadted successfully');\r\n          res.status(200).send({ message: 'password updated' });\r\n        });\r\n      }\r\n    });\r\n  },\r\n  reset: (req, res) => {\r\n    User.findOne({\r\n      resetToken: req.body.resetToken,\r\n    }).then((user) => {\r\n      if (user == null) {\r\n        console.error('password reset link is invalid or has expired');\r\n        res.status(403).send('password reset link is invalid or has expired');\r\n      } else {\r\n        res.status(200).send({\r\n          username: user.username,\r\n          message: 'password reset link a-ok',\r\n        });\r\n      }\r\n    });\r\n  },\r\n  changePassword: (req, res) => {\r\n    const { email, password, newPassword } = req.body;\r\n\r\n    User.findOne({ email }, (err, user) => {\r\n      // if(!password ) {\r\n      //   return res.json({ success: false, msg:'Current password is required to create a new one'})\r\n      // }\r\n\r\n      bcrypt.compare(password, user.password, (_err2, isMatch) => {\r\n        if (!password || !isMatch) {\r\n          return res.json({\r\n            success: false,\r\n            msg: 'Current password is required to create a new one',\r\n          });\r\n        }\r\n        if (isMatch) {\r\n          bcrypt.genSalt(10, (err, salt) => {\r\n            if (err) console.log(err);\r\n            bcrypt.hash(newPassword, salt, null, (err2, hash) => {\r\n              if (err2) throw err2;\r\n              user.password = hash;\r\n            });\r\n          });\r\n          user.save().then(() => {\r\n            console.log('Password upadted successfully');\r\n            res.status(200).send({ message: 'password updated' });\r\n          });\r\n        } else {\r\n          res.json({ success: false });\r\n        }\r\n      });\r\n    });\r\n  },\r\n  addOrWithdrawRequest: (req, res) => {\r\n    const { email, amount, addOrWithdraw } = req.body;\r\n    if (email == '') {\r\n      res.status(400).send('Not authenticated');\r\n    }\r\n    User.findOne({ email }).then((user) => {\r\n      const mailOptions = {\r\n        from: `${user.email}`,\r\n        to: 'smartfunds54@gmail.com',\r\n        subject: 'Add or withdraw money request',\r\n        text:\r\n          `${user.username} : ${user.email} ---- is requesting for ${addOrWithdraw} fund\\n` +\r\n          `Total amount ${user.username} wants to ${addOrWithdraw} is ${amount}\\n\\n` +\r\n          'Get back to the user and consider the request',\r\n      };\r\n\r\n      console.log('Send Email');\r\n\r\n      transporter.sendMail(mailOptions, (err, response) => {\r\n        if (err) {\r\n          console.error('There was an error: ', err);\r\n          res.json({success: false, msg: 'Request mail not sent due to some technical error'})\r\n        } else {\r\n          console.log('Here is the response', response);\r\n          res\r\n            .status(200)\r\n            .json({ success: true, msg: 'Request email has been sent ' });\r\n        }\r\n      });\r\n    });\r\n  },\r\n\r\n};\r\n"]}