{"version":3,"sources":["../../src/controller/adminController.js"],"names":["adminSchema","Joi","object","keys","email","string","required","username","alphanum","min","max","optional","password","adminRegister","req","res","result","validate","body","error","status","json","success","msg","details","message","Admin","findOne","then","admin","bcrypt","genSalt","err","salt","hash","err2","query","create","err3","createAdmin","adminId","_id","adminLogin","compare","_err2","isMatch","process","env","SECRET","Error","token","jwt","sign","toJSON","expiresIn","ActiveSession","undefined","adminLogout","deleteMany","getAllAdmin","_req","find","admins","map","item","x","__v","console","log","getAllUsers","User","users","josn","__V","deleteUser","next","findByIdAndDelete","params","id","user","deleteAdmin","editUserDetails","findById","data","investedAmount","currentAmount","profitAndLoss","save","usr","catch","send","addTransactionHistory","amount","date","history","TransactionHistory","transactionHistory","addUsers","userSchema","mobileNumber","createdUser","userID"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAcC,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACpCC,SAAOH,cAAII,MAAJ,GAAaD,KAAb,GAAqBE,QAArB,EAD6B;AAEpCC,YAAUN,cAAII,MAAJ,GAAaG,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EAAuCC,QAAvC,EAF0B;AAGpCC,YAAUX,cAAII,MAAJ,GAAaC,QAAb;AAH0B,CAAlB,CAApB;;kBAMe;AACbO,iBAAe,uBAACC,GAAD,EAAMC,GAAN,EAAc;AAC3B,QAAMC,SAAShB,YAAYiB,QAAZ,CAAqBH,IAAII,IAAzB,CAAf;AACA,QAAIF,OAAOG,KAAX,EAAkB;AAChBJ,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,iBAAS,KADU;AAEnBC,mCAAyBP,OAAOG,KAAP,CAAaK,OAAb,CAAqB,CAArB,EAAwBC;AAF9B,OAArB;AAIA;AACD;;AAR0B,oBAUWX,IAAII,IAVf;AAAA,QAUnBX,QAVmB,aAUnBA,QAVmB;AAAA,QAUTH,KAVS,aAUTA,KAVS;AAAA,QAUFQ,QAVE,aAUFA,QAVE;;;AAY3Bc,oBAAMC,OAAN,CAAc,EAAEvB,YAAF,EAAd,EAAyBwB,IAAzB,CAA8B,UAACC,KAAD,EAAW;AACvC,UAAIA,KAAJ,EAAW;AACTd,YAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,KAAK,sBAAvB,EAAT;AACD,OAFD,MAEO;AACLO,+BAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChCH,iCAAOI,IAAP,CAAYtB,QAAZ,EAAsBqB,IAAtB,EAA4B,IAA5B,EAAkC,UAACE,IAAD,EAAOD,IAAP,EAAgB;AAChD,gBAAIC,IAAJ,EAAU,MAAMA,IAAN;;AAEV,gBAAMC,QAAQ;AACZ7B,gCADY;AAEZH,0BAFY;AAGZQ,wBAAUsB;AAHE,aAAd;AAKAR,4BAAMW,MAAN,CAAaD,KAAb,EAAoB,UAACE,IAAD,EAAOC,WAAP,EAAuB;AACzC,kBAAID,IAAJ,EAAU,MAAMA,IAAN;AACVvB,kBAAIM,IAAJ,CAAS;AACPC,yBAAS,IADF;AAEPkB,yBAASD,YAAYE,GAFd;AAGPlB,qBAAK;AAHE,eAAT;AAKD,aAPD;AAQD,WAhBD;AAiBD,SAlBD;AAmBD;AACF,KAxBD;AAyBD,GAtCY;AAuCbmB,cAAY,oBAAC5B,GAAD,EAAMC,GAAN,EAAc;AACxB,QAAMC,SAAShB,YAAYiB,QAAZ,CAAqBH,IAAII,IAAzB,CAAf;;AAEA,QAAIF,OAAOG,KAAX,EAAkB;AAChBJ,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,iBAAS,KADU;AAEnBC,oCAA0BP,OAAOG,KAAP,CAAaK,OAAb,CAAqB,CAArB,EAAwBC;AAF/B,OAArB;AAIA;AACD;;AATuB,qBAWIX,IAAII,IAXR;AAAA,QAWhBd,KAXgB,cAWhBA,KAXgB;AAAA,QAWTQ,QAXS,cAWTA,QAXS;;;AAaxBc,oBAAMC,OAAN,CAAc,EAAEvB,YAAF,EAAd,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,UAAC4B,GAAD,EAAMH,KAAN,EAAgB;AACnD,UAAIG,GAAJ,EAAS,MAAMA,GAAN;;AAET,UAAI,CAACH,KAAL,EAAY;AACV,eAAOd,IAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,KAAK,mBAAvB,EAAT,CAAP;AACD;;AAED,UAAI,CAACM,MAAMjB,QAAX,EAAqB;AACnB,eAAOG,IAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,KAAK,2BAAvB,EAAT,CAAP;AACD;;AAEDO,6BAAOa,OAAP,CAAe/B,QAAf,EAAyBiB,MAAMjB,QAA/B,EAAyC,UAACgC,KAAD,EAAQC,OAAR,EAAoB;AAC3D,YAAIA,OAAJ,EAAa;AACX,cAAI,CAACC,QAAQC,GAAR,CAAYC,MAAjB,EAAyB;AACvB,kBAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,cAAMC,QAAQC,uBAAIC,IAAJ,CAASvB,MAAMwB,MAAN,EAAT,EAAyBP,QAAQC,GAAR,CAAYC,MAArC,EAA6C;AACzDM,uBAAW;AAD8C,WAA7C,CAAd;;AAIA,cAAMlB,QAAQ,EAAEI,SAASX,MAAMY,GAAjB,EAAsBS,YAAtB,EAAd;AACAK,kCAAclB,MAAd,CAAqBD,KAArB,EAA4B,YAAM;AAChCP,kBAAMjB,QAAN,GAAiB4C,SAAjB;AACA,mBAAOzC,IAAIM,IAAJ,CAAS;AACdC,uBAAS,IADK;AAEd4B,0BAFc;AAGdrB;AAHc,aAAT,CAAP;AAKD,WAPD;AAQD,SAlBD,MAkBO;AACL,iBAAOd,IAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,KAAK,mBAAvB,EAAT,CAAP;AACD;AACF,OAtBD;AAuBD,KAlCD;AAmCD,GAvFY;AAwFbkC,eAAa,qBAAC3C,GAAD,EAAMC,GAAN,EAAc;AAAA,QACjBmC,KADiB,GACPpC,IAAII,IADG,CACjBgC,KADiB;;;AAGzBK,4BAAcG,UAAd,CAAyB,EAAER,YAAF,EAAzB,EAAoC,UAAClB,GAAD,EAAS;AAC3C,UAAIA,GAAJ,EAAS;AACPjB,YAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAT;AACD;AACDP,UAAIM,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAT;AACD,KALD;AAMD,GAjGY;AAkGbqC,eAAa,qBAACC,IAAD,EAAO7C,GAAP,EAAe;AAC1BW,oBAAMmC,IAAN,CAAW,EAAX,EAAe,UAAC7B,GAAD,EAAM8B,MAAN,EAAiB;AAC9B,UAAI9B,GAAJ,EAASjB,IAAIM,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAT;;AAETwC,eAASA,OAAOC,GAAP,CAAW,UAACC,IAAD,EAAU;AAC5B,YAAMC,IAAID,IAAV;AACAC,UAAErD,QAAF,GAAa4C,SAAb;AACAS,UAAEC,GAAF,GAAQV,SAAR;AACA,eAAOS,CAAP;AACD,OALQ,CAAT;AAMAlD,UAAIM,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBwC,cAAjB,EAAT;AACAK,cAAQC,GAAR,CAAYN,MAAZ;AACD,KAXD;AAYD,GA/GY;AAgHbO,eAAa,qBAACT,IAAD,EAAO7C,GAAP,EAAe;AAC1BuD,mBAAKT,IAAL,CAAU,EAAV,EAAc,UAAC7B,GAAD,EAAMuC,KAAN,EAAgB;AAC5B,UAAIvC,GAAJ,EAAS;AACPjB,YAAIyD,IAAJ,CAAS,EAAElD,SAAS,KAAX,EAAT;AACD;AACDiD,cAAQA,MAAMR,GAAN,CAAU,UAACC,IAAD,EAAU;AAC1B,YAAMC,IAAID,IAAV;AACAC,UAAErD,QAAF,GAAa4C,SAAb;AACAS,UAAEQ,GAAF,GAAQjB,SAAR;AACA,eAAOS,CAAP;AACD,OALO,CAAR;AAMAlD,UAAIM,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBiD,YAAjB,EAAT;AACAJ,cAAQC,GAAR,CAAYG,KAAZ;AACD,KAZD;AAaD,GA9HY;AA+HbG,cAAY,oBAAC5D,GAAD,EAAMC,GAAN,EAAW4D,IAAX,EAAoB;AAC9BL,mBAAKM,iBAAL,CAAuB9D,IAAI+D,MAAJ,CAAWC,EAAlC,EAAsChE,IAAII,IAA1C,EAAgD,UAAUc,GAAV,EAAe+C,IAAf,EAAqB;AACnE,UAAI/C,GAAJ,EAAS,OAAO2C,KAAK3C,GAAL,CAAP;AACTjB,UAAIM,IAAJ,CAAS0D,IAAT;AACD,KAHD;AAID,GApIY;AAqIbC,eAAa,qBAAClE,GAAD,EAAMC,GAAN,EAAW4D,IAAX,EAAoB;;AAE/BjD,oBAAMkD,iBAAN,CAAwB9D,IAAI+D,MAAJ,CAAWC,EAAnC,EAAuChE,IAAII,IAA3C,EAAiD,UAAUc,GAAV,EAAeH,KAAf,EAAsB;AACrE,UAAIG,GAAJ,EAAS,OAAO2C,KAAK3C,GAAL,CAAP;AACTjB,UAAIM,IAAJ,CAASQ,KAAT;AACD,KAHD;AAID,GA3IY;AA4IboD;AAAA,wFAAiB,iBAAOnE,GAAP,EAAYC,GAAZ,EAAiB4D,IAAjB;AAAA;AAAA;AAAA;AAAA;AACfL,6BAAKY,QAAL,CAAcpE,IAAI+D,MAAJ,CAAWC,EAAzB,EAA6B,UAAC9C,GAAD,EAAMmD,IAAN,EAAe;AAC1C,oBAAI,CAACA,IAAL,EAAW,OAAOR,KAAK,IAAI1B,KAAJ,CAAU,8BAAV,CAAL,CAAP,CAAX,KACK;AACHkC,uBAAK5E,QAAL,GAAgBO,IAAII,IAAJ,CAASX,QAAzB;AACA4E,uBAAK/E,KAAL,GAAaU,IAAII,IAAJ,CAASd,KAAtB;AACA+E,uBAAKC,cAAL,GAAsBtE,IAAII,IAAJ,CAASkE,cAA/B;AACAD,uBAAKE,aAAL,GAAqBvE,IAAII,IAAJ,CAASmE,aAA9B;AACAF,uBAAKG,aAAL,GAAqBxE,IAAII,IAAJ,CAASoE,aAA9B;AACD;AACDH,qBACGI,IADH,GAEG3D,IAFH,CAEQ,UAAC4D,GAAD,EAAS;AACbzE,sBAAIM,IAAJ,CAAS,2BAAT;AACD,iBAJH,EAKGoE,KALH,CAKS,UAACzD,GAAD,EAAS;AACdjB,sBAAIK,MAAJ,CAAW,GAAX,EAAgBsE,IAAhB,CAAqB,uBAArB;AACD,iBAPH;AAQD,eAjBD;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;;AAAA;AAAA,KA5Ia;AAgKbC;AAAA,yFAAuB,kBAAO7E,GAAP,EAAYC,GAAZ,EAAiB4D,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbG,gBADa,GACNhE,IAAI+D,MADE,CACbC,EADa;AAAA,2BAEWhE,IAAII,IAFf,EAEbd,KAFa,cAEbA,KAFa,EAENwF,MAFM,cAENA,MAFM,EAEEC,IAFF,cAEEA,IAFF;;;AAIrBvB,6BAAKY,QAAL,CAAcJ,EAAd,EAAkB,UAAC9C,GAAD,EAAMmD,IAAN,EAAe;AAC/B;AACA;AACA,oBAAI,CAACA,IAAL,EAAW,OAAOR,KAAK,IAAI1B,KAAJ,CAAU,8BAAV,CAAL,CAAP;AACX,oBAAM6C,UAAU,IAAIC,4BAAJ,CAAuB;AACrC;AACA3F,yBAAOA,KAF8B;AAGrCwF,0BAAQA,MAH6B;AAIrCC,wBAAMA;AAJ+B,iBAAvB,CAAhB;AAMAC,wBACGP,IADH,GAEG3D,IAFH,CAEQ,UAAC4D,GAAD,EAAS;AACbzE,sBAAIM,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAT;AACD,iBAJH,EAKGmE,KALH,CAKS,UAACzD,GAAD;AAAA,yBAASmC,QAAQC,GAAR,CAAYpC,GAAZ,CAAT;AAAA,iBALT;AAMA;AACAmC,wBAAQC,GAAR,CAAYe,KAAKa,kBAAjB;;AAEA7B,wBAAQC,GAAR,CAAY0B,OAAZ;AACD,eApBD;;AAJqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAhKa;;AA2LbG,YAAU,kBAACnF,GAAD,EAAMC,GAAN,EAAc;AACtB,QAAMC,SAASkF,WAAWjF,QAAX,CAAoBH,IAAII,IAAxB,CAAf;AACA,QAAIF,OAAOG,KAAX,EAAkB;AAChBJ,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,iBAAS,KADU;AAEnBC,kCAAwBP,OAAOG,KAAP,CAAaK,OAAb,CAAqB,CAArB,EAAwBC;AAF7B,OAArB;AAIA;AACD;;AARqB,qBAU6BX,IAAII,IAVjC;AAAA,QAUdX,QAVc,cAUdA,QAVc;AAAA,QAUJ4F,YAVI,cAUJA,YAVI;AAAA,QAUU/F,KAVV,cAUUA,KAVV;AAAA,QAUiBQ,QAVjB,cAUiBA,QAVjB;;;AAYtB0D,mBAAK3C,OAAL,CAAa,EAAEvB,YAAF,EAAb,EAAuBwB,IAAvB,CAA4B,UAACmD,IAAD,EAAU;AACpC,UAAGA,IAAH,EAAS;AACPhE,YAAIM,IAAJ,CAAS,EAACC,SAAS,KAAV,EAAiBC,KAAK,sBAAtB,EAAT;AACD,OAFD,MAEO;AACLO,+BAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChCH,iCAAOI,IAAP,CAAYtB,QAAZ,EAAsBqB,IAAtB,EAA4B,IAA5B,EAAkC,UAACE,IAAD,EAAOD,IAAP,EAAgB;AAChD,gBAAIC,IAAJ,EAAU,MAAMA,IAAN;AACV,gBAAMC,QAAQ;AACZ7B,gCADY;AAEZ4F,wCAFY;AAGZ/F,0BAHY;AAIZQ,wBAAUsB;AAJE,aAAd;AAMAoC,2BAAKjC,MAAL,CAAYD,KAAZ,EAAmB,UAACE,IAAD,EAAO8D,WAAP,EAAuB;AACxC,kBAAI9D,IAAJ,EAAU6B,QAAQC,GAAR,CAAY9B,IAAZ,EAAkB;AAC5BvB,kBAAIM,IAAJ,CAAS;AACPC,yBAAS,IADF;AAEP+E,wBAAQD,YAAY3D,GAFb;AAGPlB,qBAAK;AAHE,eAAT;AAKD,aAPD;AAQD,WAhBD;AAiBD,SAlBD;AAmBD;AACF,KAxBD;AAyBD;AAhOY,C","file":"adminController.js","sourcesContent":["import Admin from '../models/admin.js';\r\nimport Joi from 'joi';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt-nodejs';\r\nimport ActiveSession from '../models/activeSession.js';\r\nimport User from '../models/user.js';\r\nimport TransactionHistory from '../models/transactionHistory.js';\r\n\r\nconst adminSchema = Joi.object().keys({\r\n  email: Joi.string().email().required(),\r\n  username: Joi.string().alphanum().min(4).max(15).optional(),\r\n  password: Joi.string().required(),\r\n});\r\n\r\nexport default {\r\n  adminRegister: (req, res) => {\r\n    const result = adminSchema.validate(req.body);\r\n    if (result.error) {\r\n      res.status(422).json({\r\n        success: false,\r\n        msg: `Validation Error ${result.error.details[0].message}`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const { username, email, password } = req.body;\r\n\r\n    Admin.findOne({ email }).then((admin) => {\r\n      if (admin) {\r\n        res.json({ success: false, msg: 'Email already Exists' });\r\n      } else {\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n          bcrypt.hash(password, salt, null, (err2, hash) => {\r\n            if (err2) throw err2;\r\n\r\n            const query = {\r\n              username,\r\n              email,\r\n              password: hash,\r\n            };\r\n            Admin.create(query, (err3, createAdmin) => {\r\n              if (err3) throw err3;\r\n              res.json({\r\n                success: true,\r\n                adminId: createAdmin._id,\r\n                msg: 'Admin was created successfully',\r\n              });\r\n            });\r\n          });\r\n        });\r\n      }\r\n    });\r\n  },\r\n  adminLogin: (req, res) => {\r\n    const result = adminSchema.validate(req.body);\r\n\r\n    if (result.error) {\r\n      res.status(422).json({\r\n        success: false,\r\n        msg: `Validation error: ${result.error.details[0].message}`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const { email, password } = req.body;\r\n\r\n    Admin.findOne({ email }, null, null, (err, admin) => {\r\n      if (err) throw err;\r\n\r\n      if (!admin) {\r\n        return res.json({ success: false, msg: 'Wrong Credentials' });\r\n      }\r\n\r\n      if (!admin.password) {\r\n        return res.json({ success: false, msg: 'Please enter the password' });\r\n      }\r\n\r\n      bcrypt.compare(password, admin.password, (_err2, isMatch) => {\r\n        if (isMatch) {\r\n          if (!process.env.SECRET) {\r\n            throw new Error('Secret key is not provided');\r\n          }\r\n\r\n          const token = jwt.sign(admin.toJSON(), process.env.SECRET, {\r\n            expiresIn: 86400,\r\n          });\r\n\r\n          const query = { adminId: admin._id, token };\r\n          ActiveSession.create(query, () => {\r\n            admin.password = undefined;\r\n            return res.json({\r\n              success: true,\r\n              token,\r\n              admin,\r\n            });\r\n          });\r\n        } else {\r\n          return res.json({ success: false, msg: 'Wrong credentials' });\r\n        }\r\n      });\r\n    });\r\n  },\r\n  adminLogout: (req, res) => {\r\n    const { token } = req.body;\r\n\r\n    ActiveSession.deleteMany({ token }, (err) => {\r\n      if (err) {\r\n        res.json({ success: false });\r\n      }\r\n      res.json({ success: true });\r\n    });\r\n  },\r\n  getAllAdmin: (_req, res) => {\r\n    Admin.find({}, (err, admins) => {\r\n      if (err) res.json({ success: false });\r\n\r\n      admins = admins.map((item) => {\r\n        const x = item;\r\n        x.password = undefined;\r\n        x.__v = undefined;\r\n        return x;\r\n      });\r\n      res.json({ success: true, admins });\r\n      console.log(admins);\r\n    });\r\n  },\r\n  getAllUsers: (_req, res) => {\r\n    User.find({}, (err, users) => {\r\n      if (err) {\r\n        res.josn({ success: false });\r\n      }\r\n      users = users.map((item) => {\r\n        const x = item;\r\n        x.password = undefined;\r\n        x.__V = undefined;\r\n        return x;\r\n      });\r\n      res.json({ success: true, users });\r\n      console.log(users);\r\n    });\r\n  },\r\n  deleteUser: (req, res, next) => {\r\n    User.findByIdAndDelete(req.params.id, req.body, function (err, user) {\r\n      if (err) return next(err);\r\n      res.json(user);\r\n    });\r\n  },\r\n  deleteAdmin: (req, res, next) => {\r\n    \r\n    Admin.findByIdAndDelete(req.params.id, req.body, function (err, admin) {\r\n      if (err) return next(err);\r\n      res.json(admin);\r\n    });\r\n  },\r\n  editUserDetails: async (req, res, next) => {\r\n    User.findById(req.params.id, (err, data) => {\r\n      if (!data) return next(new Error('Unable to fetch user details'));\r\n      else {\r\n        data.username = req.body.username;\r\n        data.email = req.body.email;\r\n        data.investedAmount = req.body.investedAmount;\r\n        data.currentAmount = req.body.currentAmount;\r\n        data.profitAndLoss = req.body.profitAndLoss;\r\n      }\r\n      data\r\n        .save()\r\n        .then((usr) => {\r\n          res.json('User updated successfully');\r\n        })\r\n        .catch((err) => {\r\n          res.status(400).send('Unable to update user');\r\n        });\r\n    });\r\n  },\r\n  addTransactionHistory: async (req, res, next) => {\r\n    const { id } = req.params;\r\n    const { email, amount, date } = req.body;\r\n\r\n    User.findById(id, (err, data) => {\r\n      // .populate('transactionHistory')\r\n      // .exec((err, res) => {\r\n      if (!data) return next(new Error('Unable to fetch user details'));\r\n      const history = new TransactionHistory({\r\n        // _id: id,\r\n        email: email,\r\n        amount: amount,\r\n        date: date,\r\n      });\r\n      history\r\n        .save()\r\n        .then((usr) => {\r\n          res.json({ success: true});\r\n        })\r\n        .catch((err) => console.log(err));\r\n      // history.populate('transactionHistory')\r\n      console.log(data.transactionHistory);\r\n\r\n      console.log(history);\r\n    });\r\n  },\r\n\r\n  addUsers: (req, res) => {\r\n    const result = userSchema.validate(req.body);\r\n    if (result.error) {\r\n      res.status(422).json({\r\n        success: false,\r\n        msg: `Validation err: ${result.error.details[0].message}`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const { username, mobileNumber, email, password} = req.body;\r\n\r\n    User.findOne({ email}).then((user) => {\r\n      if(user) {\r\n        res.json({success: false, msg: \"Email already exists\"});\r\n      } else {\r\n        bcrypt.genSalt(10, (err, salt) => {\r\n          bcrypt.hash(password, salt, null, (err2, hash) => {\r\n            if (err2) throw err2;\r\n            const query = {\r\n              username,\r\n              mobileNumber,\r\n              email,\r\n              password: hash,\r\n            };\r\n            User.create(query, (err3, createdUser) => {\r\n              if (err3) console.log(err3);;\r\n              res.json({\r\n                success: true,\r\n                userID: createdUser._id,\r\n                msg: 'The user was succesfully registered',\r\n              });\r\n            });\r\n          });\r\n        })\r\n      }\r\n    })\r\n  },\r\n};\r\n"]}